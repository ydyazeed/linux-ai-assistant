#!/usr/bin/env python3
import socket
import json
import sys
import argparse
import time

class ChatbotClient:
    def __init__(self, host='localhost', port=5000):
        self.host = host
        self.port = port
        self.socket = None
        
    def connect(self):
        """Establish connection to the server"""
        if not self.socket:
            try:
                self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                self.socket.connect((self.host, self.port))
                return True
            except Exception as e:
                print(f"Error connecting to server: {str(e)}", file=sys.stderr)
                return False
        return True

    def disconnect(self):
        """Close the connection"""
        if self.socket:
            try:
                self.socket.close()
            except:
                pass
            self.socket = None

    def send_query(self, query):
        """Send a query to the chatbot server and receive the response"""
        if not self.connect():
            return
        
        try:
            # Send the query
            print("Sending query...", file=sys.stderr)
            send_start = time.time()
            self.socket.send(json.dumps({'query': query}).encode('utf-8'))
            print(f"Query sent in {time.time() - send_start:.3f} seconds", file=sys.stderr)
            
            # Receive the response
            print("Waiting for response...", file=sys.stderr)
            recv_start = time.time()
            response = self.socket.recv(32768).decode('utf-8')  # Increased buffer size
            recv_time = time.time() - recv_start
            print(f"Response received in {recv_time:.3f} seconds", file=sys.stderr)
            
            # Parse and display response
            response_data = json.loads(response)
            if 'error' in response_data:
                print(f"Error: {response_data['error']}")
            else:
                print(response_data['response'])
                if 'process_time' in response_data:
                    print(f"\nServer processing time: {response_data['process_time']:.3f} seconds", file=sys.stderr)
                
        except Exception as e:
            print(f"Error: {str(e)}", file=sys.stderr)
            self.disconnect()  # Reset connection on error

def main():
    parser = argparse.ArgumentParser(description='Linux Command Assistant')
    parser.add_argument('query', nargs='+', help='Your Linux command question')
    args = parser.parse_args()
    
    # Combine all arguments into a single query string
    query = ' '.join(args.query)
    
    # Create client and send query
    client = ChatbotClient()
    client.send_query(query)
    client.disconnect()

if __name__ == "__main__":
    main() 